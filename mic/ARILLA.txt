// Multicycle Arilla RISC-V core pseudocode
idle:	br (if halted then this)
start:	IR <= MEM[PC], PC <= PC + 4, br (if mem_align_exception then fault)
		A <= REG[IR[source1]], B <= REG[IR[source2]], C <= PC + IR[branch_imm], br (case (lui, auipc, jal, jalr, branch, load, store, ri, fault)
lui:	REG[IR[destination]] <= IR[upper_immediate] << 12, br start
auipc:	C <= PC + IR[upper_im] << 12, br reg_w
jal:	REG[IR[destination]] <= PC, PC <= PC + sign_extend(IR[jal_imm]), br start
jalr:	REG[IR[destination]] <= PC, PC <= (R[IR[source1]] + sign_extend(IR[imm])) & (~1), br start
branch:	if (aluzero) PC <= C, br start
load:	C <= REG[IR[source1]] + sign_extend(IR[imm]), br (if mem_align_exception then fault)
		MDR <= MEM[C]
		REG[IR[destination]] <= MDROutput, br start
store:	C <= REG[IR[source1]] + sign_extend(IR[imm]), br (if mem_align_exception then fault)
		MEM[C] <= B, br start
ri:		C <= A op (OP_IMM)?sign_extend(IR[imm]):B
reg_w:	REG[IR[destination]] <= C, br start
fault:	fault_signal, br this 